package io.github.kory33.guardedqueries.core.rewriting

import com.google.common.collect.ImmutableSet
import uk.ac.ox.cs.pdq.fol._
import java.util
import java.util.concurrent.atomic.AtomicInteger
import io.github.kory33.guardedqueries.core.utils.CachingFunction
import io.github.kory33.guardedqueries.core.utils.extensions.ConjunctiveQueryExtensions
import io.github.kory33.guardedqueries.core.utils.extensions.VariableSetExtensions

/**
 * A mapping that sends a set V of connected variables to an atom that asserts that the query
 * has been existentially satisfied for the variables in V with a particular instantiation of
 * the neighborhood of V.
 */
class SubgoalAtomGenerator(
  boundVariableConnectedQuery: ConjunctiveQuery,
  intentionalPredicatePrefix: String
) {
  private val connectedComponents =
    new CQBoundVariableConnectedComponents(boundVariableConnectedQuery)
  if (connectedComponents.maximallyConnectedSubqueries.size > 1)
    throw new IllegalArgumentException(
      "The given query (" + boundVariableConnectedQuery + ") is not bound-variable-connected."
    )
  if (!connectedComponents.boundVariableFreeAtoms.isEmpty) throw new IllegalArgumentException(
    "The given query (" + boundVariableConnectedQuery + ") contains bound-variable-free atoms."
  )

  private val queryBoundVariables: ImmutableSet[Variable] =
    ImmutableSet.copyOf(boundVariableConnectedQuery.getBoundVariables)
  private val predicateGeneratingCounter = new AtomicInteger(0)

  final private var subgoalAtoms
    : CachingFunction[ /* query-connected */ ImmutableSet[ /* query-bound */ Variable], Atom] =
    CachingFunction { (variableSet: ImmutableSet[Variable]) =>
      // by the contract, we can (and should) reject variable sets that
      //  - are not connected, or
      //  - contain non-bound variables
      if (!ConjunctiveQueryExtensions.isConnected(boundVariableConnectedQuery, variableSet))
        throw new IllegalArgumentException(
          "The given set of variables (" + variableSet + ") is not connected in the given query (" + boundVariableConnectedQuery + ")."
        )
      if (!queryBoundVariables.containsAll(variableSet)) throw new IllegalArgumentException(
        "The given set of variables (" + variableSet + ") contains non-bound variables in the given query (" + boundVariableConnectedQuery + ")."
      )
      val neighbourhood = ConjunctiveQueryExtensions.neighbourhoodVariables(
        boundVariableConnectedQuery,
        variableSet
      )
      val symbol = intentionalPredicatePrefix + "_" + predicateGeneratingCounter.getAndIncrement
      val subgoalPredicate = Predicate.create(symbol, neighbourhood.size)
      val orderedNeighbourhood = VariableSetExtensions.sortBySymbol(neighbourhood)

      import scala.jdk.CollectionConverters._
      Atom.create(subgoalPredicate, orderedNeighbourhood.asScala.toArray: _*)
    }

  /**
   * Computes an atom corresponding to the given connected set of variables in a query, while
   * storing any generated atom to the cache for future use. <p> On generation of an atom, the
   * predicate symbol of the atom is generated by concatenating {@code
   * intentionalPredicatePrefix} with an internal integer counter.
   *
   * @throws IllegalArgumentException
   *   if the given set of variables is disconnected or contains free variables.
   */
  def apply(variableSet: util.Collection[_ <: Variable]): Atom =
    this.subgoalAtoms.apply(ImmutableSet.copyOf(variableSet))
}
